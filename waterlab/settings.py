"""
Django settings for waterlab project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv # For environment variables
import dj_database_url # For database configuration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load SECRET_KEY from .env file. Fallback to a default (insecure) key if not found.
# For production, ensure SECRET_KEY is set in your environment.
SECRET_KEY = config('SECRET_KEY', default='django-insecure-fallback-key-replace-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG status from .env file. Defaults to False if not set.
# For local development, set DEBUG=True in your .env file.
DEBUG = config('DEBUG', default=False, cast=bool)

# Load ALLOWED_HOSTS from .env file.
# Expects a comma-separated string, e.g., "localhost,127.0.0.1,mydomain.com"
# Defaults to common local development hosts if not set.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=Csv())
if DEBUG and '*' not in ALLOWED_HOSTS:  # Add '*' in DEBUG mode if not already broadly defined
    ALLOWED_HOSTS.append('*')

# Make it safe on Render even if this settings module is used.
# Render typically sets RENDER_EXTERNAL_HOSTNAME and runs behind a proxy.
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME and RENDER_EXTERNAL_HOSTNAME not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
if '.onrender.com' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('.onrender.com')

# CSRF trusted origins for Render domains
_csrf_trusted = [f"https://{RENDER_EXTERNAL_HOSTNAME}"] if RENDER_EXTERNAL_HOSTNAME else []
_csrf_trusted.append('https://*.onrender.com')
CSRF_TRUSTED_ORIGINS = list(set((_csrf_trusted + [
    # Common local/testing origins (kept minimal)
    'http://localhost',
    'http://127.0.0.1',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
])))

# Honor X-Forwarded-Proto on Render
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', # Added the core app
]

# Custom User Model
AUTH_USER_MODEL = 'core.CustomUser'

# Login/Logout URLs
LOGIN_URL = 'core:login_selector' # Changed to use the named URL for login selector
LOGIN_REDIRECT_URL = 'core:dashboard' # Changed to use named URL for consistency
LOGOUT_REDIRECT_URL = 'core:login_selector' # Changed to redirect to login selector after logout

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Added for static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'waterlab.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Optional: project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'waterlab.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Uses dj-database-url to parse DATABASE_URL from .env file.
# Defaults to SQLite if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600 # Enable connection pooling
    )
}
if DATABASES['default']['ENGINE'] == 'django.db.backends.sqlite3':
    print("üóÉÔ∏è  Using SQLite Database (Development Mode or default)")
elif DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql':
    print("üêò Using PostgreSQL Database")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = config('TIME_ZONE', default='Asia/Kolkata')

USE_I18N = True

USE_L10N = config('USE_L10N', default=False, cast=bool) # Explicitly disable locale-specific formatting for numbers/dates by default

USE_TZ = True

DATETIME_INPUT_FORMATS = [
    '%d/%m/%Y %H:%M:%S',
    '%d/%m/%Y %H:%M',
    '%d/%m/%Y',
    '%Y-%m-%d %H:%M:%S',
    '%Y-%m-%d %H:%M',
    '%Y-%m-%d',
]

# Auto-seed standard parameters after migrations when DB is empty
AUTO_SEED_PARAMETERS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Directories where Django will look for static files in addition to app's 'static/' directories
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise configuration for serving static files in production
# Ensure DEBUG is False for WhiteNoise to serve files efficiently.
# If DEBUG is True, Django's staticfiles app handles serving.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Caching: prefer Redis (if REDIS_URL is set), otherwise LocMem for dev
REDIS_URL = config('REDIS_URL', default=None)
if REDIS_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            },
            'TIMEOUT': 300,
        }
    }
    SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'waterlab-locmem-cache',
            'TIMEOUT': 300,
        }
    }

# Email Configuration
# Defaults to console output if not set in .env, suitable for development.
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='webmaster@localhost')

# Logging Configuration (Optional - Basic example)
# For more advanced logging, refer to Django documentation.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Change to 'DEBUG' for more verbose output
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': config('DJANGO_LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
    },
}

# Sentry Integration (Optional - for error tracking in production)
SENTRY_DSN = config('SENTRY_DSN', default=None)
if SENTRY_DSN and not DEBUG: # Only initialize Sentry if DSN is provided and not in DEBUG mode
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration

        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[DjangoIntegration()],
            # Set traces_sample_rate to 1.0 to capture 100%
            # of transactions for performance monitoring.
            # Adjust as needed for production.
            traces_sample_rate=config('SENTRY_TRACES_SAMPLE_RATE', default=0.1, cast=float),
            # If you wish to associate users to errors (assuming you have user data)
            send_default_pii=True,
            environment=config('SENTRY_ENVIRONMENT', default='development' if DEBUG else 'production')
        )
        print("üîí Sentry SDK initialized.")
    except ImportError:
        print("‚ö†Ô∏è Sentry DSN provided, but 'sentry-sdk' is not installed. Skipping Sentry initialization.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error initializing Sentry: {e}")

# Custom Application Settings (if any)
# EXAMPLE_SETTING = config('EXAMPLE_SETTING', default='some_value') # Removed example placeholder
