# Generated by Django 5.2.1 on 2025-05-24 15:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('house_name_door_no', models.CharField(blank=True, max_length=100, null=True, verbose_name='House Name / Door Number')),
                ('street_locality_landmark', models.CharField(blank=True, default='', max_length=200, verbose_name='Street / Locality / Landmark')),
                ('village_town_city', models.CharField(blank=True, default='', max_length=100, verbose_name='Village / Town / City')),
                ('panchayat_municipality', models.CharField(blank=True, default='', max_length=100, verbose_name='Panchayat / Municipality / Corporation')),
                ('taluk', models.CharField(blank=True, default='', max_length=100, verbose_name='Taluk')),
                ('district', models.CharField(blank=True, choices=[('thiruvananthapuram', 'Thiruvananthapuram'), ('kollam', 'Kollam'), ('pathanamthitta', 'Pathanamthitta'), ('alappuzha', 'Alappuzha'), ('kottayam', 'Kottayam'), ('idukki', 'Idukki'), ('ernakulam', 'Ernakulam'), ('thrissur', 'Thrissur'), ('palakkad', 'Palakkad'), ('malappuram', 'Malappuram'), ('kozhikode', 'Kozhikode'), ('wayanad', 'Wayanad'), ('kannur', 'Kannur'), ('kasaragod', 'Kasaragod')], default='thiruvananthapuram', max_length=50, verbose_name='District')),
                ('pincode', models.CharField(blank=True, default='', max_length=6, verbose_name='PIN Code')),
                ('address', models.TextField(blank=True, help_text='Complete address (auto-populated)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestParameter',
            fields=[
                ('parameter_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('unit', models.CharField(max_length=50)),
                ('standard_method', models.CharField(blank=True, max_length=255, null=True)),
                ('min_permissible_limit', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('max_permissible_limit', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('lab', 'Lab Technician'), ('frontdesk', 'Front Desk'), ('consultant', 'Consultant')], default='frontdesk', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('sample_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('collection_datetime', models.DateTimeField()),
                ('sample_source', models.CharField(choices=[('WELL', 'Well'), ('BOREWELL', 'Borewell'), ('TAP', 'Tap'), ('RIVER', 'River'), ('POND', 'Pond'), ('OTHER', 'Other')], max_length=50)),
                ('collected_by', models.CharField(max_length=255)),
                ('date_received_at_lab', models.DateTimeField(blank=True, null=True)),
                ('current_status', models.CharField(choices=[('RECEIVED_FRONT_DESK', 'Received at Front Desk'), ('SENT_TO_LAB', 'Sent to Lab'), ('TESTING_IN_PROGRESS', 'Testing in Progress'), ('RESULTS_ENTERED', 'Results Entered'), ('REVIEW_PENDING', 'Review Pending'), ('REPORT_APPROVED', 'Report Approved'), ('REPORT_SENT', 'Report Sent')], default='RECEIVED_FRONT_DESK', max_length=50)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='core.customer')),
                ('tests_requested', models.ManyToManyField(blank=True, related_name='samples', to='core.testparameter')),
            ],
        ),
        migrations.CreateModel(
            name='ConsultantReview',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews_conducted', to=settings.AUTH_USER_MODEL)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='KeralaLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location_type', models.CharField(choices=[('district', 'District'), ('taluk', 'Taluk'), ('village', 'Village'), ('panchayat', 'Panchayat'), ('municipality', 'Municipality'), ('corporation', 'Corporation')], max_length=20)),
                ('district_code', models.CharField(blank=True, max_length=10, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.keralalocation')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'location_type', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('result_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('result_value', models.CharField(help_text="Actual result value. Can be numeric or text (e.g., 'Present', 'Absent')", max_length=255)),
                ('observation', models.TextField(blank=True, null=True)),
                ('test_date', models.DateTimeField(auto_now_add=True)),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='results', to='core.testparameter')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.sample')),
                ('technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_results_entered', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sample', 'parameter')},
            },
        ),
    ]
